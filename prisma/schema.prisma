generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  generateFileTypes               = "all"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "false"
  wrapRelationsAsType             = "false"
  showDefaultValues               = "false"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model branch {
  id              Int          @id @default(autoincrement())
  /// @DtoRelationIncludeId
  facultyId       Int?
  thaiDescription String?      @db.Text
  engDescription  String?      @db.Text
  thaiName        String?      @db.VarChar(255)
  engName         String?      @db.VarChar(255)
  abbrev          String?      @db.VarChar(5)
  // Relations
  faculty         faculty?     @relation(fields: [facultyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  curriculum      curriculum[]
  instructor      instructor[]
  student         student[]

  @@index([facultyId])
}

model course {
  id       Int      @id @default(autoincrement())
  active   Boolean? @default(true) @db.TinyInt
  semester Int      @db.TinyInt // TinyInt is  -128 to 127
  year     Int      @db.SmallInt // more acceptable range

  /// @DtoRelationIncludeId
  subjectId Int
  subject   subject @relation(fields: [subjectId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  course_instructors course_instructor[]
  skill_collections  skill_collection[]

  @@index([subjectId])
}

model course_instructor {
  instructorId Int
  courseId     Int
  instructor   instructor @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course       course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([instructorId, courseId])
  @@index([instructorId])
  @@index([courseId])
}

model subject {
  id              Int        @id @default(autoincrement())
  code            String     @unique() @db.VarChar(50)
  /// @DtoRelationIncludeId
  curriculumId    Int
  thaiName        String?    @db.VarChar(255)
  engName         String?    @db.VarChar(255)
  credit          String?    @db.VarChar(10)
  type            String     @default("บังคับ") @db.VarChar(255)
  thaiDescription String?    @db.Text
  engDescription  String?    @db.Text
  isRoot          Boolean?   @default(false)
  clos            clo[]
  lesson          lesson?
  curriculum      curriculum @relation(fields: [curriculumId], references: [id])
  courses         course[]

  @@index([curriculumId])
}

model curriculum {
  id              Int     @id @default(autoincrement())
  /// @DtoRelationIncludeId
  branchId        Int
  code            String  @unique() @db.VarChar(255)
  thaiName        String? @db.VarChar(255)
  engName         String? @db.VarChar(255)
  thaiDegree      String? @db.VarChar(255)
  engDegree       String? @db.VarChar(255)
  period          Int     @db.TinyInt()
  minimumGrade    Decimal @db.Decimal(3, 2)
  thaiDescription String? @db.Text
  engDescription  String? @db.Text

  students     student[]
  branch       branch                    @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coordinators curriculum_coordinators[]
  subjects     subject[]
  plos         plo[]
  skills       skill[]

  @@index([branchId])
}

model curriculum_coordinators {
  /// @DtoRelationIncludeId
  instructorId Int
  /// @DtoRelationIncludeId
  curriculumId Int
  instructor   instructor @relation(fields: [instructorId], references: [id], onUpdate: Cascade)
  curriculum   curriculum @relation(fields: [curriculumId], references: [id], onUpdate: Cascade)

  @@id([instructorId, curriculumId])
  @@index([instructorId])
  @@index([curriculumId])
}

model faculty {
  id              Int      @id @default(autoincrement())
  thaiName        String   @db.VarChar(255)
  engName         String?  @db.VarChar(255)
  thaiDescription String?  @db.Text
  engDescription  String?  @db.Text
  abbrev          String?  @db.VarChar(10)
  branch          branch[]
}

model instructor {
  id                 Int                       @id @default(autoincrement())
  /// @DtoRelationIncludeId
  branchId           Int?
  code               String?                   @unique() @db.VarChar(255)
  thaiName           String                    @unique() @db.VarChar(255)
  engName            String                    @unique() @db.VarChar(255)
  tel                String?                   @db.VarChar(255)
  // picture            String?                   @db.VarChar(255)
  position           String?                   @db.VarChar(255)
  email              String                    @unique() @db.VarChar(255)
  // officeRoom         String?                   @db.VarChar(255)
  // specialists        String?                   @db.VarChar(255)
  // socials            String?                   @db.VarChar(255)
  // bio                String?                   @db.Text
  course_instructors course_instructor[]
  curriculums        curriculum_coordinators[]
  branch             branch?                   @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user               user?
}

model plo {
  id              Int        @id @default(autoincrement())
  /// @DtoRelationIncludeId
  curriculumId    Int
  type            String     @db.VarChar(255)
  name            String?    @db.VarChar(255)
  thaiDescription String?    @db.Text
  engDescription  String?    @db.Text
  clos            clo[]
  curriculum      curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([curriculumId])
}

model clo {
  id              Int     @id @default(autoincrement())
  name            String? @db.VarChar(255)
  /// @DtoRelationIncludeId
  ploId           Int?
  /// @DtoRelationIncludeId
  subjectId       Int?
  thaiDescription String? @db.Text
  engDescription  String? @db.Text
  /// @DtoRelationIncludeId
  skillId         Int? // New reference to a single skill

  expectSkillLevel Int? @db.TinyInt // may delete this after

  plo               plo?               @relation(fields: [ploId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  subject           subject?           @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  skill             skill?             @relation(fields: [skillId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  skill_collections skill_collection[]

  @@index([ploId])
  @@index([subjectId])
  @@index([skillId])
}

model skill {
  id              Int     @id @default(autoincrement())
  thaiName        String  @db.VarChar(255)
  engName         String  @db.VarChar(255)
  thaiDescription String  @db.Text
  engDescription  String  @db.Text
  domain          String  @db.VarChar(100)
  /// @DtoRelationIncludeId
  parentId        Int?
  /// @DtoRelationIncludeId
  curriculumId    Int
  // Self-referencing relation for parent-child skills
  parent          skill?  @relation("SkillHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  subs            skill[] @relation("SkillHierarchy")

  // One-to-Many relation: A skill can have multiple CLOs
  clos clo[] // CLOs now belong to a single skill

  curriculum curriculum @relation(fields: [curriculumId], references: [id])
}

// * if skill just have 1 level sub-skill, this no need
// model skill_tree {
//   ancestorId   Int
//   descendantId Int

//   ancestorSkill   skill  @relation("SkillTreeAncestor", fields: [ancestorId], references: [id], onDelete: Cascade)
//   descendantSkill skill  @relation("SkillTreeDescendant", fields: [descendantId], references: [id], onDelete: Cascade)
//   skill           skill? @relation(fields: [skillId], references: [id])
//   skillId         Int?

//   @@id([ancestorId, descendantId])
//   @@index([descendantId])
//   @@index([ancestorId])
// }

model skill_collection {
  id          Int      @id @default(autoincrement())
  /// @DtoRelationIncludeId
  studentId   Int?
  gainedLevel Int      @default(0)
  passed      Boolean  @default(false)
  cloId       Int?
  courseId    Int?
  course      course?  @relation(fields: [courseId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  clo         clo?     @relation(fields: [cloId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  student     student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([studentId, cloId, courseId]) // Index เร่งความเร็วในการค้นหาด้วย studentId, cloId, courseId
}

model student {
  id                Int                @id @default(autoincrement())
  code              String             @unique @db.VarChar(255)
  engName           String?            @db.VarChar(255)
  enrollmentDate    DateTime?          @db.DateTime(0)
  socials           Json? // Better for multiple social links, Prisma will store this as TEXT in MariaDB
  thaiName          String?            @db.VarChar(255)
  // One to many
  skill_collections skill_collection[]
  /// @DtoRelationIncludeId
  curriculumId      Int?
  curriculum        curriculum?        @relation(fields: [curriculumId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  branchId          Int?
  branch            branch?            @relation(fields: [branchId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  /// @DtoRelationIncludeId
  userId            Int?
  user              user?

  @@index([code]) // Index เร่งความเร็วในการค้นหาด้วย code
}

model lesson {
  id        Int     @id @default(autoincrement())
  /// @DtoRelationIncludeId
  subjectId Int     @unique()
  thaiName  String? @db.VarChar(255)
  engName   String? @db.VarChar(255)
  subject   subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([subjectId])
}

model user {
  id                 Int         @id @default(autoincrement())
  email              String      @unique @db.VarChar(255)
  password           String      @db.VarChar(255)
  avatarUrl          String?     @db.VarChar(255)
  role               String?     @db.VarChar(255)
  hashedRefreshToken String?     @db.VarChar(255)
  /// @DtoRelationIncludeId
  studentId          Int?        @unique
  student            student?    @relation(fields: [studentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  /// @DtoRelationIncludeId
  instructorId       Int?        @unique
  instructor         instructor? @relation(fields: [instructorId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([instructorId, studentId]) // Ensures a user has either instructorId or studentId, but not both
}

model company {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  thaiDescription String?  @db.Text
  engDescription  String?  @db.Text
  address         String?  @db.Text
  tel             String?  @db.VarChar(50)
  email           String?  @db.VarChar(255)
  website         String?  @db.VarChar(255)
}
