generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  classValidation                 = "true"
  createDtoPrefix                 = "Create"
  definiteAssignmentAssertion     = "false"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  exportRelationModifierClasses   = "true"
  fileNamingStyle                 = "camel"
  flatResourceStructure           = "false"
  generateFileTypes               = "all"
  noDependencies                  = "false"
  outputToNestJsResourceStructure = "false"
  outputType                      = "class"
  prettier                        = "false"
  reExport                        = "false"
  requiredResponseApiProperty     = "true"
  showDefaultValues               = "false"
  updateDtoPrefix                 = "Update"
  wrapRelationsAsType             = "false"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model branch {
  id              Int          @id @default(autoincrement())
  /// @DtoRelationIncludeId
  facultyId       Int?
  thaiDescription String?      @db.Text
  engDescription  String?      @db.Text
  thaiName        String?      @db.VarChar(255)
  engName         String?      @db.VarChar(255)
  abbrev          String?      @db.VarChar(5)
  faculty         faculty?     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  curriculum      curriculum[]
  instructor      instructor[]
  student         student[]

  @@index([facultyId])
}

model course {
  id                 Int                 @id @default(autoincrement())
  active             Boolean?            @default(true)
  semester           Int                 @db.TinyInt
  year               Int                 @db.SmallInt
  /// @DtoRelationIncludeId
  subjectId          Int
  subject            subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  course_instructors course_instructor[]
  skill_collections  skill_collection[]

  @@index([subjectId])
}

model course_instructor {
  id           Int         @id @default(autoincrement())
  instructorId Int?
  courseId     Int?
  course       course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   instructor? @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([instructorId])
  @@index([courseId])
}

model subject {
  id              Int        @id @default(autoincrement())
  code            String     @unique @db.VarChar(50)
  /// @DtoRelationIncludeId
  curriculumId    Int
  thaiName        String?    @db.VarChar(255)
  engName         String?    @db.VarChar(255)
  credit          String?    @db.VarChar(10)
  type            String     @default("บังคับ") @db.VarChar(255)
  thaiDescription String?    @db.Text
  engDescription  String?    @db.Text
  isRoot          Boolean?   @default(false)
  clos            clo[]
  courses         course[]
  curriculum      curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@index([curriculumId])
}

model curriculum {
  id                 Int                       @id @default(autoincrement())
  /// @DtoRelationIncludeId
  branchId           Int
  code               String                    @unique @db.VarChar(255)
  thaiName           String?                   @db.VarChar(255)
  engName            String?                   @db.VarChar(255)
  thaiDegree         String?                   @db.VarChar(255)
  engDegree          String?                   @db.VarChar(255)
  period             Int                       @db.TinyInt
  minimumGrade       Decimal                   @db.Decimal(3, 2)
  thaiDescription    String?                   @db.Text
  engDescription     String?                   @db.Text
  branch             branch                    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  coordinators       curriculum_coordinators[]
  plos               plo[]
  skills             skill[]
  students           student[]
  subjects           subject[]
  level_descriptions level_description[]

  @@index([branchId])
}

model curriculum_coordinators {
  /// @DtoRelationIncludeId
  coordinatorId Int
  /// @DtoRelationIncludeId
  curriculumId  Int
  curriculum    curriculum  @relation(fields: [curriculumId], references: [id])
  coordinator   coordinator @relation(fields: [coordinatorId], references: [id])

  @@id([coordinatorId, curriculumId])
  @@index([coordinatorId])
  @@index([curriculumId])
}

model faculty {
  id              Int      @id @default(autoincrement())
  thaiName        String   @db.VarChar(255)
  engName         String?  @db.VarChar(255)
  thaiDescription String?  @db.Text
  engDescription  String?  @db.Text
  abbrev          String?  @db.VarChar(10)
  branch          branch[]
}

model coordinator {
  id          Int                       @id @default(autoincrement())
  thaiName    String                    @unique @default("") @db.VarChar(255)
  engName     String                    @unique @default("") @db.VarChar(255)
  user        user?
  curriculums curriculum_coordinators[]
}

model instructor {
  id                 Int                 @id @default(autoincrement())
  /// @DtoRelationIncludeId
  branchId           Int?
  code               String?             @unique @db.VarChar(255)
  thaiName           String              @unique @db.VarChar(255)
  engName            String              @unique @db.VarChar(255)
  tel                String?             @db.VarChar(255)
  position           String?             @db.VarChar(255)
  email              String              @unique @db.VarChar(255)
  course_instructors course_instructor[]
  branch             branch?             @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user               user?

  @@index([branchId], map: "instructor_branchId_fkey")
}

model plo {
  id              Int        @id @default(autoincrement())
  /// @DtoRelationIncludeId
  curriculumId    Int
  type            String     @db.VarChar(255)
  name            String?    @db.VarChar(255)
  thaiDescription String?    @db.Text
  engDescription  String?    @db.Text
  clos            clo[]
  curriculum      curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@index([curriculumId])
}

model clo {
  id                Int                @id @default(autoincrement())
  name              String?            @db.VarChar(255)
  /// @DtoRelationIncludeId
  ploId             Int?
  /// @DtoRelationIncludeId
  subjectId         Int?
  thaiDescription   String?            @db.Text
  engDescription    String?            @db.Text
  /// @DtoRelationIncludeId
  skillId           Int?
  expectSkillLevel  Int?               @db.TinyInt
  plo               plo?               @relation(fields: [ploId], references: [id], onUpdate: NoAction)
  skill             skill?             @relation(fields: [skillId], references: [id], onUpdate: NoAction)
  subject           subject?           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  skill_collections skill_collection[]

  @@index([ploId])
  @@index([subjectId])
  @@index([skillId])
}

model skill {
  id                Int                @id @default(autoincrement())
  thaiName          String             @db.VarChar(255)
  engName           String             @db.VarChar(255)
  thaiDescription   String             @db.Text
  engDescription    String             @db.Text
  domain            String             @db.VarChar(100)
  /// @DtoRelationIncludeId
  parentId          Int?
  /// @DtoRelationIncludeId
  curriculumId      Int
  clos              clo[]
  curriculum        curriculum         @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  parent            skill?             @relation("SkillHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  subs              skill[]            @relation("SkillHierarchy")
  skill_assessments skill_assessment[]

  @@index([curriculumId], map: "skill_curriculumId_fkey")
  @@index([parentId], map: "skill_parentId_fkey")
}

model skill_collection {
  id          Int      @id @default(autoincrement())
  /// @DtoRelationIncludeId
  studentId   Int?
  gainedLevel Int      @default(0)
  passed      Boolean  @default(false)
  cloId       Int? 
  courseId    Int?
  clo         clo?     @relation(fields: [cloId], references: [id], onUpdate: NoAction)
  course      course?  @relation(fields: [courseId], references: [id], onUpdate: NoAction)
  student     student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, cloId])
  @@index([studentId, cloId, courseId])
  @@index([cloId], map: "skill_collection_cloId_fkey")
  @@index([courseId], map: "skill_collection_courseId_fkey")
}

model student {
  id                  Int                  @id @default(autoincrement())
  code                String               @unique @db.VarChar(255)
  engName             String?              @db.VarChar(255)
  enrollmentDate      DateTime?            @db.DateTime(0)
  socials             String?              @db.LongText
  thaiName            String?              @db.VarChar(255)
  /// @DtoRelationIncludeId
  curriculumId        Int?
  /// @DtoRelationIncludeId
  branchId            Int?
  /// @DtoRelationIncludeId
  userId              Int?
  skill_assessments   skill_assessment[]
  skill_collections   skill_collection[]
  branch              branch?              @relation(fields: [branchId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  curriculum          curriculum?          @relation(fields: [curriculumId], references: [id], onUpdate: NoAction)
  student_internships student_internship[]
  user                user?

  @@index([code])
  @@index([branchId], map: "student_branchId_fkey")
  @@index([curriculumId], map: "student_curriculumId_fkey")
}

model user {
  id                 Int          @id @default(autoincrement())
  email              String       @unique @db.VarChar(255)
  password           String       @db.VarChar(255)
  avatarUrl          String?      @db.VarChar(255)
  role               String?      @db.VarChar(255)
  hashedRefreshToken String?      @db.VarChar(255)
  /// @DtoRelationIncludeId
  studentId          Int?         @unique
  /// @DtoRelationIncludeId
  instructorId       Int?         @unique
  /// @DtoRelationIncludeId
  coordinatorId      Int?         @unique
  instructor         instructor?  @relation(fields: [instructorId], references: [id], onUpdate: NoAction)
  student            student?     @relation(fields: [studentId], references: [id], onUpdate: NoAction)
  coordinator        coordinator? @relation(fields: [coordinatorId], references: [id], onUpdate: NoAction)
  audit_logs         audit_log[]

  @@unique([instructorId, studentId, coordinatorId])
}

model company {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @db.VarChar(255)
  description           String?                @db.Text
  address               String?                @db.Text
  tel                   String?                @db.VarChar(50)
  email                 String?                @db.VarChar(255)
  company_job_positions company_job_position[]
  internships           internship[]
}

model job_position {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @db.VarChar(255)
  company_job_positions company_job_position[]
  student_internships   student_internship[]
}

model company_job_position {
  id            Int           @id @default(autoincrement())
  companyId     Int?
  jobPositionId Int?
  company       company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobPosition   job_position? @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)

  @@index([companyId], map: "company_job_position_companyId_fkey")
  @@index([jobPositionId], map: "company_job_position_jobPositionId_fkey")
}

model internship {
  id                 Int                  @id @default(autoincrement())
  year               Int?
  token              String?              @unique @db.VarChar(32)
  /// @DtoRelationIncludeId
  companyId          Int?
  company            company?             @relation(fields: [companyId], references: [id], onDelete: NoAction)
  studentInternships student_internship[]

  @@index([companyId], map: "internship_companyId_fkey")
}

model student_internship {
  id Int @id @default(autoincrement())

  isAssessed Boolean @default(false)

  /// @DtoRelationIncludeId
  studentId     Int?
  /// @DtoRelationIncludeId 
  jobPositionId Int?
  /// @DtoRelationIncludeId
  internshipId  Int?
  internship    internship?   @relation(fields: [internshipId], references: [id], onDelete: NoAction)
  jobPosition   job_position? @relation(fields: [jobPositionId], references: [id], onDelete: NoAction)
  student       student?      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([internshipId])
  @@index([jobPositionId])
  @@index([studentId], map: "student_internship_studentId_fkey")
}

model skill_assessment {
  id                Int      @id @default(autoincrement())
  curriculumLevel   Int?     @default(0)
  companyLevel      Int?     @default(0)
  finalLevel        Int?     @default(0)
  curriculumComment String?  @db.Text
  companyComment    String?  @db.Text
  /// @DtoRelationIncludeId
  skillId           Int?
  /// @DtoRelationIncludeId
  studentId         Int?
  skill             skill?   @relation(fields: [skillId], references: [id], onDelete: NoAction)
  student           student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([skillId, studentId])
  @@index([skillId, studentId])
  @@index([studentId], map: "skill_assessment_studentId_fkey")
}

model audit_log {
  id         Int      @id @default(autoincrement())
  userId     Int?
  user       user?    @relation(fields: [userId], references: [id])
  action     String   @db.VarChar(100)
  resource   String   @db.VarChar(100) // resource คือ ชื่อทรัพยากร หรือชื่อโมดูลที่ถูกดำเนินการ
  resourceId String?  @db.VarChar(255) // resourceId คือ รหัสทรัพยากรที่ถูกดำเนินการ
  before     Json? // 🔥 สภาพข้อมูลก่อนเปลี่ยน
  after      Json? // 🔥 สภาพข้อมูลหลังเปลี่ยน
  metadata   Json?
  timestamp  DateTime @default(now()) @db.DateTime(0)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

model level_description {
  id          Int     @id @default(autoincrement())
  level       Int
  description String
  isHardSkill Boolean

  /// @DtoRelationIncludeId
  curriculumId Int
  curriculum   curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@index([curriculumId])
}
